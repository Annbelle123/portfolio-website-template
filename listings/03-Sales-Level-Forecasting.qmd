---
title: "Sales Level Forecasting"
description: "A dashboard summarizing historical sales trends and predicting future order sales"
categories: [Sales, Visualizations, Financial Analytics, Volume Analytics, Forecasting]
index: 2
---

```{r, echo=FALSE, message=FALSE, warning=FALSE, results='hide'}

# Load Libraries
library(janitor) 
library(tidyverse) 
library(lubridate)
library(forecast)
library(shiny)
library(plotly)
library(dplyr)
library(knitr)
library(scales)
library(tidyr)


# Load Data
data <- read.csv("../data/SuperStoreSales.csv")

# clean column names using janitor
data <- clean_names(data)

# check for missing values
data %>% 
  is.na() %>% 
  sum()

# pull records with missing values
sapply(data, function(x)which(is.na(x)))
data[c(2235,5275,8799,9147,9148,9149,9387,9388,9389,9390,9742),]

# na values driven by burlington city missing postal code. add postal code for burlington
data$postal_code<-replace_na(data$postal_code,05401)

# Check for remaining missing values
data %>% 
  is.na() %>% 
  sum()

# Convert dates to Date format
data$order_date <- as.Date(data$order_date, format = "%d/%m/%Y")
data$ship_date <- as.Date(data$ship_date, format = "%d/%m/%Y")

# Calculate summary stats
total_sales <- sum(data$sales, na.rm = TRUE)
num_orders <- n_distinct(data$order_id)
avg_sales_per_order <- round(mean(data$sales, na.rm = TRUE), 2)

# Format total sales using scales package
formatted_total_sales <- scales::dollar(total_sales)

# Comma-separated number of orders
formatted_num_orders <- scales::comma(num_orders)

 # Dollar sign for avg sales
formatted_avg_sales_per_order <- scales::dollar(avg_sales_per_order) 
```

<!-- CSS for card layout -->

```{=html}
<style>
  .card-container {
    display: flex;
    justify-content: space-around;
    gap: 20px;
    flex-wrap: wrap;
    width: 100%; /* Ensure the container takes up full width */
  }

  .card {
    border: 1px solid #ccc;
    padding: 15px;
    border-radius: 8px;
    width: 45%; /* Default width for cards */
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    margin-bottom: 20px;
  }

  /* Larger cards for specific sections like Sales Over Time and Top 3 Sales Months */
  .card.sales-time {
    width: 100% !important;  /* Ensure this card takes full width */
    min-height: 500px;  /* Increase height to accommodate the graph */
    padding: 20px;
    margin-bottom: 40px; /* Extra space for large cards */
  }

  .card.top-sales {
    width: 100% !important; /* Keep this card full width if needed */
    min-height: 400px;
    padding: 20px;
  }
  
  .card.product-segment {
  width: 100% !important;
  min-height: 400px;
  padding: 20px;
  margin-bottom: 40px;
}

  @media (min-width: 768px) {
    .card {
      width: 30%; /* 3 cards in a row for larger screens */
    }

    /* Keep the larger cards at 100% width for wide plots/tables */
    .card.sales-time {
      width: 100% !important;  /* Full width for Sales Over Time on larger screens */
    }

    .card.top-sales {
      width: 48%; /* Slightly larger for top-sales */
    }
  }

  @media (max-width: 600px) {
    .card {
      width: 100%; /* Stack vertically on mobile */
    }

    .card.sales-time {
      width: 100% !important;  /* Ensure full width on mobile */
      min-height: 300px;  /* Adjust for smaller screens */
    }
  }
</style>
```

# üõí About the Dataset

This dashboard is built using a sales dataset from Kaggle that captures **four years of transactions** from a global superstore. Each row represents a unique order, with details spanning **customer segments**, **order and shipping dates**, **shipping methods**, **product categories**, and **sales revenue**.

The dataset enables analysis of key business insights including:

-   **Sales trends over time**

-   **Product and category profitability**

-   **Customer behavior by segment**






# üí∞ Forecasting Future Sales Volume

::: {.card .sales-time}
<h5 class="card-title">
üí∞  Forecasting Future Sales Volume
</h5>


```{r, echo=FALSE, message=FALSE, warning=FALSE, results='hide'}

sales_by_month <- data %>%
  mutate(month = floor_date(order_date, "month")) %>%
  group_by(month) %>%
  summarise(sales_volume = sum(sales, na.rm = TRUE))

ts_data <- ts(sales_by_month$sales_volume,
              start = c(year(min(sales_by_month$month)), month(min(sales_by_month$month))),
              frequency = 12)

fit <- auto.arima(ts_data, seasonal = TRUE)
forecasted <- forecast(fit, h = 12)

autoplot(forecasted) +
  labs(title = "Forecasted Monthly Sales Volume with Seasonality",
       x = "Month",
       y = "Predicted Sales") +
  theme_minimal()
```
:::

This time series plot visualizes the predicted total monthly sales for the next 12 months using an ARIMA model. It incorporates historical sales data and seasonal patterns to forecast future performance. The shaded confidence intervals help assess the uncertainty in predictions, offering a strategic view of expected revenue trends.

# üßæ Forecasting Sales Volume by Product Category

::: {.card .sales-time}
<h5 class="card-title">
üí∞  Forecasting Future Sales Volume by Product Category
</h5>

```{r, echo=FALSE, warning=FALSE, message=FALSE, fig.height=6, fig.width=10}
# Forecasting Monthly Sales by Product Category

category_monthly_sales <- data %>%
  mutate(month = floor_date(order_date, "month")) %>%
  group_by(category, month) %>%
  summarise(sales_volume = sum(sales, na.rm = TRUE), .groups = "drop")

category_forecasts <- category_monthly_sales %>%
  group_by(category) %>%
  group_split() %>%
  setNames(unique(category_monthly_sales$category)) %>%
  lapply(function(df) {
    ts_data <- ts(df$sales_volume,
                  start = c(year(min(df$month)), month(min(df$month))),
                  frequency = 12)
    fit <- auto.arima(ts_data, seasonal = TRUE)
    forecast(fit, h = 12)
  })

par(mfrow = c(1, length(category_forecasts)))
for (cat in names(category_forecasts)) {
  plot(category_forecasts[[cat]],
       main = paste("Forecast for", cat),
       ylab = "Sales", xlab = "Month")
}
```
:::

This panel of plots breaks down monthly sales forecasts by product category‚ÄîFurniture, Office Supplies, and Technology. Each subplot uses historical data to project future sales, highlighting category-specific trends and seasonality. This helps identify which product lines are expected to grow or decline, aiding inventory and marketing strategies.

# üßë‚Äçüíº Forecasting Sales Volume by Customer Segment

::: {.card .sales-time}
<h5 class="card-title">
üßë‚Äçüíº Forecasting Sales Volume by Customer Segment
</h5>

```{r, echo=FALSE, message=FALSE, warning=FALSE, results='hide', , fig.height=6, fig.width=10}

segment_monthly_sales <- data %>%
  mutate(month = floor_date(order_date, "month")) %>%
  group_by(segment, month) %>%
  summarise(sales_volume = sum(sales, na.rm = TRUE), .groups = "drop")

segments <- unique(segment_monthly_sales$segment)
par(mfrow = c(length(segments), 1))

for (seg in segments) {
  df <- segment_monthly_sales %>%
    filter(segment == seg) %>%
    complete(month = seq(min(month), max(month), by = "month"), fill = list(sales_volume = 0)) %>%
    arrange(month)

  ts_data <- ts(df$sales_volume,
                start = c(year(min(df$month)), month(min(df$month))),
                frequency = 12)

  fit <- auto.arima(ts_data, seasonal = TRUE)
  forecasted <- forecast(fit, h = 12)

  plot(forecasted,
       main = paste("Forecasted Monthly Sales -", seg, "Segment"),
       ylab = "Sales Volume", xlab = "Month")
}
```
:::

This set of time series forecasts shows monthly sales projections for each customer segment‚ÄîConsumer, Corporate, and Home Office. By modeling each segment individually, the dashboard reveals how different customer groups are expected to contribute to future sales, supporting targeted engagement and resource allocation.

# ‚úÖ 12 Month Sales Forecast Trended

::: {.card .sales-time}
<h5 class="card-title">

</h5>

```{r transposed-forecast-table, echo=FALSE, message=FALSE, warning=FALSE}

# Prepare monthly sales data
sales_by_month <- data %>%
  mutate(month = floor_date(order_date, "month")) %>%
  group_by(month) %>%
  summarise(sales_volume = sum(sales, na.rm = TRUE), .groups = "drop")

# Convert to time series
ts_data <- ts(sales_by_month$sales_volume,
              start = c(year(min(sales_by_month$month)), month(min(sales_by_month$month))),
              frequency = 12)

# Fit ARIMA model
fit <- auto.arima(ts_data, seasonal = TRUE)

# Forecast next 12 months
forecasted <- forecast(fit, h = 12)

# Create forecast table
forecast_table <- data.frame(
  Month = format(seq(max(sales_by_month$month) %m+% months(1), by = "month", length.out = 12), "%b.%Y"),
  `High Estimate` = forecasted$upper[,1],
  `Expected Forecast` = forecasted$mean,
  `Low Estimate` = forecasted$lower[,1]
)

# Transpose and format as currency
transposed_table <- t(forecast_table[,-1])
colnames(transposed_table) <- forecast_table$Month
rownames(transposed_table) <- c("High Estimate", "Expected Forecast", "Low Estimate")
transposed_table <- apply(transposed_table, c(1,2), function(x) dollar(x, accuracy = 1))

# Display the transposed table
kable(transposed_table, caption = "üìÖ 12-Month Sales Forecast")
```
:::

This transposed table presents a 12-month forecast of total monthly sales using an ARIMA model. It includes high, expected, and low estimates for each month, offering a clear and concise view of projected revenue trends. The format supports quick comparisons across months and helps stakeholders plan for best- and worst-case scenarios.

# üóÇÔ∏è 12-Month Sales Forecast by Product Category

::: {.card .sales-time}
<h5 class="card-title">
üìä Forecast Tables for Furniture, Office Supplies, and Technology
</h5>


```{r 12monthfcstbyprodcat, echo=FALSE, message=FALSE, warning=FALSE}

# Prepare monthly sales data by category
category_monthly_sales <- data %>%
  mutate(month = floor_date(order_date, "month")) %>%
  group_by(category, month) %>%
  summarise(sales_volume = sum(sales, na.rm = TRUE), .groups = "drop")

# Function to forecast and format table for a category
forecast_category_table <- function(df, category_name) {
  df <- df %>%
    filter(category == category_name) %>%
    complete(month = seq(min(month), max(month), by = "month"), fill = list(sales_volume = 0)) %>%
    arrange(month)

  ts_data <- ts(df$sales_volume,
                start = c(year(min(df$month)), month(min(df$month))),
                frequency = 12)

  fit <- auto.arima(ts_data, seasonal = TRUE)
  forecasted <- forecast(fit, h = 12)

  forecast_table <- data.frame(
    Month = format(seq(max(df$month) %m+% months(1), by = "month", length.out = 12), "%b.%Y"),
    `High Estimate` = forecasted$upper[,1],
    `Expected Forecast` = forecasted$mean,
    `Low Estimate` = forecasted$lower[,1]
  )

  transposed_table <- t(forecast_table[,-1])
  colnames(transposed_table) <- forecast_table$Month
  rownames(transposed_table) <- c("High Estimate", "Expected Forecast", "Low Estimate")
  transposed_table <- apply(transposed_table, c(1,2), function(x) dollar(x, accuracy = 1))

  kable(transposed_table, caption = paste("üìÖ 12-Month Sales Forecast -", category_name))
}

# Generate tables for each category
forecast_category_table(category_monthly_sales, "Furniture")
forecast_category_table(category_monthly_sales, "Office Supplies")
forecast_category_table(category_monthly_sales, "Technology")
```
:::

These three transposed tables provide detailed 12-month sales forecasts for each product category‚ÄîFurniture, Office Supplies, and Technology. Each table includes high, expected, and low estimates, allowing for category-specific planning and performance tracking. This breakdown supports more granular decision-making in inventory, marketing, and budgeting.

## üìé Appendix

This dashboard was created using data from a public Kaggle dataset: [Sales Dataset on Kaggle](https://www.kaggle.com/datasets/rohitsahoo/sales-forecasting)
